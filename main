////
// Author:       Amanda Todakonzie
// Section:      S
// Assignment:   P5 - Knight's Tour
// Description:  This program is designed to solve the famous Knight's Tour 
// problem, where the "Knight" of the chess board game is challenged to make 
// a series of moved that occupy every space on the chess board at least once
// and only once. I designed this program using recursion to solve the puzzle.
// I use constants to set up the size of the board and global variables to keep
// track of the total move count OR tries "moveCount" and keep tracking of the 
//bad move count "badMoves".
////

#include <iostream>
#include <iomanip>
using namespace std;


//Constants
const int ROW = 8;
const int COL = 8;

//Global Variables
int moveCount = 0;
int badMoves = 0;
int board[ROW][COL];

//Function Prototypes
void setupBoard();
bool moveKnight(int row, int col, int moveNum);
void printBoard();


int main() {

	//Setting up Knight to start at 0,0)
	int row = 0;
	int col = 0;
	int moveNum = 0;

	//Intro
	cout << "\n***Welcome to my Knight's Tour Program***\n";
	cout << "The Knight will start moving from: [" << row << "] [" << col << "]";

	setupBoard();
	cout << "\n\n - Board set up complete - ";
	cout << "\n - Tour initiated - \n";
	printBoard();

	if (moveKnight(7, 0, 1) == true) {
		cout << "\n - Tour completed sucessfullly! - ";
		cout << "\nAfter " << moveCount << " tries and " << badMoves << " bad moves." << endl;
		printBoard();
		cout << endl;
	}

	return 0;
}


void setupBoard() {
	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			board[i][j] = 0;
		}
	}

}

bool moveKnight(int row, int col, int move) {

	if (row > -1 && row < ROW && col > -1 && col < COL && board[row][col] == 0) {
		board[row][col] = move;
		moveCount++;

		if (moveCount % 10000000 == 0) {
			printBoard();
			cout << "Move count: " << moveCount << " Bad moves: " << badMoves << endl;
		}
		
	}
	else {
		
		return false;
	}

	if (move == (ROW * COL)) {
		return true;
	}
		// 1 MOVE (+1)(+2)
	if (moveKnight(row - 1, col + 2, move + 1)) {
		return true;
	}
		// 2 MOVE (+1)(-2)
	if (moveKnight(row + 1, col - 2, move + 1)) {
		return true;
	}
		// 3 MOVE (-1)(+2)
	if (moveKnight(row + 1, col + 2, move + 1)) {
		return true;
	}
		// 4 MOVE(-1)(-2)
	if (moveKnight(row - 1, col - 2, move + 1)) {
		return true;
	}
		// 5 MOVE(-2)(+1)
	if (moveKnight(row - 2, col + 1, move + 1)) {
		return true;
	}
		// 6 MOVE(-2)(-1)
	if (moveKnight(row - 2, col - 1, move + 1)) {
		return true;
	}
		// 7 MOVE(+2)(+1)
	if (moveKnight(row + 2, col + 1, move + 1)) {
		return true;
	}
		// 8 MOVE(+2)(-1)
	if (moveKnight(row + 2, col - 1, move + 1)) {
		return true;
	}	

	badMoves++;
	board[row][col] = 0;
	return false;
}


void printBoard() {
	cout << endl;
	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			cout << setw(3) << board[i][j];
		}
		cout << endl;
	}
	cout << endl;
}
