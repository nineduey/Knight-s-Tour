////
// Description:  This program is designed to solve the famous Knight's Tour 
// problem, where the "Knight" of the chess board game is challenged to make 
// a series of moved that occupy every space on the chess board at least once
// and only once. I designed this program using recursion to solve the puzzle.
// I use constants to set up the size of the board and global variables to keep
// track of the total move count OR tries "moveCount" and keep tracking of the 
//bad move count "badMoves".
////

#include <iostream>
#include <iomanip>
using namespace std;


//Constants
const int ROW = 5;
const int COL = 5;

//Global Variables
int moveCount = 0;
int badMoves = 0;
int board[ROW][COL];

//Function Prototypes
void setupBoard();
bool moveKnight(int row, int col, int moveNum);
void printBoard();


int main() {

	//Setting up Knight to start at 0,0)
	int row = 0;
	int col = 0;
	int moveNum = 1;

	//Intro
	cout << "\n***Welcome to my Knight's Tour Program***\n";
	cout << "The Knight will start moving from: [" << row << "] [" << col << "]";


	setupBoard();
	cout << "\n\n - Board set up complete - ";
	cout << "\n - Tour initiated - ";
	moveKnight(row, col, moveNum);

	if (moveKnight(row, col, moveNum) == true) {
		cout << "\n - Tour completed sucessfullly! - ";
		cout << "Total moves: " << moveCount << endl;
		printBoard();
		cout << endl;
	}

	return 0;
}

//Function Definitions
void setupBoard() {
	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			board[i][j] = 0;
		}
	}

}

bool moveKnight(int row, int col, int move) {

	if (move == (ROW * COL)) {
		return true; // terminate condition
	}

	if ((row > -1) && (row < ROW) && (col > -1) && (col < COL) && (board[row][col] == 0)) {

		// 1 MOVE (+1)(+2)
		if (moveKnight(row + 1, col + 2, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 2 MOVE (+1)(-2)
		if (moveKnight(row + 1, col - 2, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 3 MOVE (-1)(+2)
		if (moveKnight(row - 1, col + 2, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 4 MOVE(-1)(-2)
		if (moveKnight(row - 1, col - 2, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 5 MOVE(-2)(+1)
		if (moveKnight(row - 2, col + 1, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 6 MOVE(-2)(-1)
		if (moveKnight(row - 2, col - 1, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 7 MOVE(+2)(+1)
		if (moveKnight(row + 2, col + 1, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
		// 8 MOVE(+2)(-1)
		if (moveKnight(row + 2, col - 1, move)) {
			moveCount++;
			board[row][col] = move;
			printBoard();
			system("pause");
		}
	}
	//Resetting space to 0 if no valid move is available
	badMoves++;
	board[row][col] = 0;
	return false;
}


void printBoard() {
	cout << endl;
	for (int i = 0; i < ROW; i++) {
		for (int j = 0; j < COL; j++) {
			cout << setw(3) << board[i][j];
		}
		cout << endl;
	}
	cout << endl;
}
